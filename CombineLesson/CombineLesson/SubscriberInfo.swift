//
//  SubscriberInfo.swift
//  CombineLesson
//
//  Created by Ali on 30.01.2025.
//

import Combine
import UIKit

/*
 –ß—Ç–æ —ç—Ç–æ?
 üëâ –û–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–¥–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.

 –ê–Ω–∞–ª–æ–≥–∏—è:
 –í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ä–∞–¥–∏–æ –∏ –Ω–∞—á–∞–ª–∏ —Å–ª—É—à–∞—Ç—å. –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –º—É–∑—ã–∫—É –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏.
 
 */

class SubscriberInfo {
    private let publisher = Just("–ü—Ä–∏–≤–µ—Ç, Combine!")
    /**
     1Ô∏è‚É£ sink ‚Äì –°–∞–º—ã–π —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–ø–∏—Å–∫–∏

     Just("–ü—Ä–∏–≤–µ—Ç, Combine!") ‚Äî —Å–æ–∑–¥–∞—ë—Ç –ø–æ—Ç–æ–∫ —Å –æ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
     .sink {} ‚Äî –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
     
     ‚úÖ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
     –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞.
     */
    func initSink() {
        let subscription = publisher.sink { value in
            print("–ü–æ–ª—É—á–µ–Ω–æ: \(value)") // "–ü—Ä–∏–≤–µ—Ç, Combine!"
        }
    }
    
    /**
     2Ô∏è‚É£ assign ‚Äì –ü—Ä–∏–≤—è–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫ —Å–≤–æ–π—Å—Ç–≤—É
     –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å @Published –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, –º–æ–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫ –Ω–µ–º—É.
     
     ‚úÖ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
     –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
     */
    
    func assignInit() {
        class ViewModel {
            @Published var text: String = "–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"
        }

        let viewModel = ViewModel()
        let publisher = Just("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")

        let subscription = publisher
            .assign(to: \.text, on: viewModel)

        print(viewModel.text) // "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
    }
    
    /**
     3Ô∏è‚É£ receiveSubscriber ‚Äì –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
     –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤—Ä—É—á–Ω—É—é.
     
     ‚úÖ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
     –ö–æ–≥–¥–∞ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–æ–¥–ø–∏—Å–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç—è–º–∏).
     */
    
    func receiveSubscriberInit() {
        let publisher = [1, 2, 3, 4, 5].publisher

        final class CustomSubscriber: Subscriber {
            typealias Input = Int
            typealias Failure = Never

            func receive(subscription: Subscription) {
                print("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")
                subscription.request(.unlimited) // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            }

            func receive(_ input: Int) -> Subscribers.Demand {
                print("–ü–æ–ª—É—á–µ–Ω–æ: \(input)")
                return .unlimited
            }

            func receive(completion: Subscribers.Completion<Never>) {
                print("–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
            }
        }

        let subscriber = CustomSubscriber()
        publisher.subscribe(subscriber)
    }
    
    /**
     4Ô∏è‚É£ store(in:) ‚Äì –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
     –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É—Ç–µ–∫–∞–ª–∏ –≤ –ø–∞–º—è—Ç—å, –∏—Ö –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å Set<AnyCancellable>().
     
     ‚úÖ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
     –í—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—à—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ UIViewController –∏–ª–∏ ViewModel, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏.
     */
    func storeInit() {
        class ViewModel {
            @Published var text: String = "–ù–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç"
            private var cancellables = Set<AnyCancellable>()

            func updateText() {
                Just("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    .assign(to: \.text, on: self)
                    .store(in: &cancellables) // –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è
            }
        }

        let viewModel = ViewModel()
        viewModel.updateText()
        print(viewModel.text) // "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
    }
    
    /**
     5Ô∏è‚É£ debounce + sink ‚Äì –ü—Ä–∏–º–µ—Ä —Å UITextField
     
     ‚úÖ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
     –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */
    func debounceSinkMethod() {
        class ViewController: UIViewController {
            private let textField = UITextField()
            private var cancellables = Set<AnyCancellable>()

            override func viewDidLoad() {
                super.viewDidLoad()
                
                textField.frame = CGRect(x: 20, y: 100, width: 300, height: 40)
                textField.borderStyle = .roundedRect
                view.addSubview(textField)

                textField.publisher(for: \.text)
                    .compactMap { $0 }
                    .debounce(for: .seconds(0.5), scheduler: RunLoop.main)
                    .sink { text in
                        print("–ü–æ–∏—Å–∫: \(text)")
                    }
                    .store(in: &cancellables)
            }
        }
    }
}

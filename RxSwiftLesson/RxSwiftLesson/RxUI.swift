//
//  Rx_UI.swift
//  RxSwiftLesson
//
//  Created by Ali on 30.01.2025.
//

import Foundation

import UIKit
import RxSwift
import RxCocoa

/*
 RxSwift –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –∫—É—á–∏ –¥–µ–ª–µ–≥–∞—Ç–æ–≤, —Ç–∞–π–º–µ—Ä–æ–≤ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤.

 Observable ‚Äî –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö (YouTube-–∫–∞–Ω–∞–ª üé•).
 Observer ‚Äî –ø–æ–¥–ø–∏—Å—á–∏–∫ (–ó—Ä–∏—Ç–µ–ª—å YouTube üëÄ).
 Operators ‚Äî –∏–∑–º–µ–Ω—è—é—Ç –¥–∞–Ω–Ω—ã–µ (–§–∏–ª—å—Ç—Ä –Ω–∞ YouTube üéõ).
 Subjects ‚Äî —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ WhatsApp-–≥—Ä—É–ø–ø–∞ üí¨.
 DisposeBag ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ (–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ üóë).
 RxSwift —É–ø—Ä–æ—â–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–º. üöÄ
 */

class RxController: UIViewController {
    private let textField = UITextField() // TODO: make local lazy elements
    private let button = UIButton() // TODO: make local lazy elements
    private let disposeBag = DisposeBag()

    override func viewDidLoad() {
        super.viewDidLoad()
        
        textField.frame = CGRect(x: 20, y: 100, width: 300, height: 40)
        textField.borderStyle = .roundedRect
        view.addSubview(textField) // TODO: place with constraints
        view.addSubview(button) // TODO: place with constraints

        /*
         1Ô∏è‚É£ UITextField + RxSwift (–ø–æ–∏—Å–∫ —Å debounce)
         –î–æ–±–∞–≤–ª—è–µ–º debounce, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.
         ‚úÖ –¢–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–≤–æ–¥–∞.
         */
        textField.rx.text.orEmpty
            .debounce(.milliseconds(500), scheduler: MainScheduler.instance)
            .subscribe(onNext: { text in
                print("–ü–æ–∏—Å–∫: \(text)") // TODO: send a request to DB or server
            })
            .disposed(by: disposeBag)
        
        testButtonSubscribe()
    }
    
    
    /**
     ‚úÖ –ù–µ –Ω—É–∂–Ω–æ addTarget(_:action:for:)!
     */
    func testButtonSubscribe() {
        button.rx.tap
            .subscribe(onNext: {
                print("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
            })
            .disposed(by: disposeBag)
    }
}
